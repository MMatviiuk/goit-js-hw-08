
!function(e){
    // Перевірка середовища і експорт модуля
    if("object" == typeof exports && "undefined" != typeof module) {
        module.exports = e();
    } else if ("function" == typeof define && define.amd) {
        define([], e);
    } else {
        ("undefined" != typeof window ? window :
        "undefined" != typeof global ? global :
        "undefined" != typeof self ? self : this).basicLightbox = e()
    }
}((function() {
    return function e(n, t, o) {
        function r(c, u) {
            if (!t[c]) {
                if (!n[c]) {
                    var s = "function" == typeof require && require;
                    if (!u && s) return s(c, !0);
                    if (i) return i(c, !0);
                    var a = new Error("Cannot find module '" + c + "'");
                    throw a.code = "MODULE_NOT_FOUND", a;
                }
                var l = t[c] = { exports: {} };
                n[c][0].call(l.exports, (function(e) {
                    return r(n[c][1][e] || e)
                }), l, l.exports, e, n, t, o)
            }
            return t[c].exports
        }
        for (var i = "function" == typeof require && require, c = 0; c < o.length; c++) r(o[c]);
        return r
    }
    ({
        1: [function(e, n, t) {
            "use strict";
            Object.defineProperty(t, "__esModule", { value: !0 }),
            t.create = t.visible = void 0;

            // Створення DOM-елемента з HTML рядка
            var o = function(e) {
                var n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                    t = document.createElement("div");
                return t.innerHTML = e.trim(), !0 === n ? t.children : t.firstChild;
            },

            // Перевірка, чи є дочірнім елементом тег певного типу
            r = function(e, n) {
                var t = e.children;
                return 1 === t.length && t[0].tagName === n;
            },

            // Перевірка, чи модальне вікно видиме на екрані
            i = function(e) {
                return null != (e = e || document.querySelector(".basicLightbox")) && !0 === e.ownerDocument.body.contains(e);
            };

            t.visible = i;

            // Функція для створення модального вікна
            t.create = function(e, n) {
                var t = function(e, n) {
                    // Створення основної структури модального вікна
                    var t = o('<div class="basicLightbox '.concat(n.className, '"><div class="basicLightbox__placeholder" role="dialog"></div></div>')),
                        i = t.querySelector(".basicLightbox__placeholder");

                    // Додавання контенту до модального вікна
                    e.forEach((function(e) {
                        return i.appendChild(e);
                    }));

                    // Перевірка типу контенту (зображення)
                    var c = r(i, "IMG");
                    !0 === c && t.classList.add("basicLightbox--img");
                    return t;
                }(
                    // Підготовка контенту
                    e = function(e) {
                        var n = "string" == typeof e,
                            t = e instanceof HTMLElement == 1;

                        if (!1 === n && !1 === t) throw new Error("Content must be a DOM element/node or string");

                        return !0 === n ? Array.from(o(e, !0)) : "TEMPLATE" === e.tagName ? [e.content.cloneNode(!0)] : Array.from(e.children);
                    }(e),

                    // Налаштування параметрів модального вікна
                    n = function() {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};

                        if (null == (e = Object.assign({}, e)).closable && (e.closable = !0),
                            null == e.className && (e.className = ""),
                            null == e.onShow && (e.onShow = function() {}),
                            null == e.onClose && (e.onClose = function() {}),
                            "boolean" != typeof e.closable) throw new Error("Property `closable` must be a boolean");

                        if ("string" != typeof e.className) throw new Error("Property `className` must be a string");
                        if ("function" != typeof e.onShow) throw new Error("Property `onShow` must be a function");
                        if ("function" != typeof e.onClose) throw new Error("Property `onClose` must be a function");

                        return e;
                    }(n)
                ),

                // Функція для закриття модального вікна
                c = function(e) {
                    return !1 !== n.onClose(u) && function(e, n) {
                        e.classList.remove("basicLightbox--visible");
                        setTimeout((function() {
                            return !1 === i(e) || e.parentElement.removeChild(e), n();
                        }), 410);
                        return !0;
                    }(t, (function() {
                        if ("function" == typeof e) return e(u);
                    }));
                };

                // Додавання обробника для закриття при кліку поза контентом
                !0 === n.closable && t.addEventListener("click", (function(e) {
                    e.target === t && c();
                }));

                // Об'єкт, який представляє модальне вікно
                var u = {
                    element: function() {
                        return t;
                    },
                    visible: function() {
                        return i(t);
                    },
                    show: function(e) {
                        return !1 !== n.onShow(u) && function(e, n) {
                            document.body.appendChild(e);
                            setTimeout((function() {
                                requestAnimationFrame((function() {
                                    e.classList.add("basicLightbox--visible");
                                    n();
                                }));
                            }), 10);
                            return !0;
                        }(t, (function() {
                            if ("function" == typeof e) return e(u);
                        }));
                    },
                    close: c
                };

                return u;
            }
        }, {}]
    },
    [1]
    )(1)
}));

